#!/bin/bash

function usage() {
	echo "usage example: pgtc -s my_test_db_datadir"
	echo ""
	echo "Options:"
	echo "  -h/--help  Usage"
	echo "  -d/--datadir  Folder for initdb"
	echo "  -s/--start  Launch the cluster"
	echo "  -p/--port  Postgres port"
	echo "  -r/--replica  Also create a streaming replica"
	echo "  -l/--logical  Also create a streaming replica"
  echo "  -b/--binpath  Use the specified Postgres bin folder (default: /usr/lib/postgresql/11/bin/)"
  echo "  -v/--version  Major version (default: 11)"
	exit 0
}

function ensure_empty_folder {
	if [ -d $1 ]; then
		echo "folder $1 already exists!"
		exit 1
	fi
	mkdir $1
}

if [ "$#" -eq 0 ]; then
  usage
fi

BINPATH=/usr/lib/postgresql/12/bin/
VERSION=12  # important to specify for 12+ due to recovery.conf going away
PORT=${PORT:-6432}
export PGHOST=/tmp
export PGDATABASE=postgres

while [ $# -gt 1 ]
do
key="$1"

case $key in
    -h|--help)
    usage
    ;;
    -d|--datadir)
    DATADIR="$2"
    ensure_empty_folder $DATADIR
    shift
    ;;
    -s|--start)
    START=1
    ;;
    -b|--binpath)
    BINPATH="${2}/"
    shift
    ;;
    -r|--replica)
    REPLICA=1
    ;;
    -p|--port)
    PORT="$2"
    shift
    ;;    
    -l|--logical)
    LOGICAL=1
    ;;
    -v|--version)
    VERSION="$2"
    shift
    ;;
    *)
    echo "unknown option: $key"
    ;;
esac
shift # past argument or value
done

if [ -n "$1" ]; then
    DATADIR="$1"
fi


echo "running initdb with BINDIR $BINPATH ..."
echo "*** using NON-PERSISTENT settings ***"

${BINPATH}initdb --auth-local=trust --auth-host=trust -D $DATADIR &>/dev/null
if [ $? -ne 0 ]; then
	echo "initdb failed"
	exit 1
fi


OPTS=$(cat <<HERE
port=${PORT}
fsync=off
full_page_writes=off
wal_compression=on
unix_socket_directories='/tmp'
logging_collector=on
log_filename='postgresql.log'
max_wal_senders=10
max_replication_slots=10
wal_level=logical
hot_standby=on
cluster_name=pgtc_${PORT}
HERE
)

echo "$OPTS" >> $DATADIR/postgresql.conf
echo ""
echo "Configuration changes applied: "
echo "$OPTS"
echo ""


if [ -n "$REPLICA" -a -z "$LOGICAL" ]; then

    echo "setting up a normal streaming replica ..."

    sed -ri 's/#([local|host].*replication)/\1/g' $DATADIR/pg_hba.conf

    echo "starting master"
    ${BINPATH}pg_ctl -D $DATADIR -w start &>/dev/null
    echo "stopping master again"
    ${BINPATH}pg_ctl -D $DATADIR -w stop &>/dev/null

    # pg_basebackup -D "$DATADIR_repl" start &>/dev/null
    echo "$DATADIR ${DATADIR}_repl"
    cp -r $DATADIR ${DATADIR}_repl
    if [ $? -ne 0 ]; then
        echo "copying replica failed"
        exit 1
    fi
    REPL_PORT=$((PORT+1000))
    echo "port=$REPL_PORT" >> ${DATADIR}_repl/postgresql.conf
    echo "cluster_name=pgtc_${REPL_PORT}" >> ${DATADIR}_repl/postgresql.conf

    if [ $VERSION -ge 12 ] ; then
        touch ${DATADIR}_repl/standby.signal
        echo "primary_conninfo='host=localhost port=${PORT} application_name=replica1'" >> ${DATADIR}_repl/postgresql.conf
    else
        echo "standby_mode=on" >> ${DATADIR}_repl/recovery.conf
        echo "primary_conninfo='host=localhost port=${PORT} application_name=replica1'" >> ${DATADIR}_repl/recovery.conf
    fi
    echo "replica in folder ${DATADIR}_repl with port $REPL_PORT created"
fi

if [ -n "$REPLICA" -a -n "$LOGICAL" ]; then

    echo "setting up a logical replication replica with pgbench schema ..."

    sed -ri 's/#([local|host].*replication)/\1/g' $DATADIR/pg_hba.conf

    echo "starting master"
    ${BINPATH}pg_ctl -D $DATADIR -w start &>/dev/null

    ${BINPATH}initdb --auth-local=trust --auth-host=trust -D ${DATADIR}_repl &>/dev/null
    if [ $? -ne 0 ]; then
      echo "replica initdb failed"
      exit 1
    fi

    REPL_PORT=$((PORT+1000))
    cp ${DATADIR}/postgresql.conf ${DATADIR}_repl/postgresql.conf
    echo "port=$REPL_PORT" >> ${DATADIR}_repl/postgresql.conf
    echo "cluster_name=pgtc_${REPL_PORT}" >> ${DATADIR}_repl/postgresql.conf

    echo "starting logical replica"
    ${BINPATH}pg_ctl -D ${DATADIR}_repl -w start &>/dev/null

    echo "init master pgbench schema"
    ${BINPATH}pgbench -i -p ${PORT} &>/dev/null

    echo "sync schema to replica"
    ${BINPATH}pg_dump -s -p ${PORT} ${PGDATABASE} | ${BINPATH}psql -p ${REPL_PORT} ${PGDATABASE} &>/dev/null

    echo "set up pub-sub"
    ${BINPATH}psql -p ${PORT} -d ${PGDATABASE} -c "create publication pub1 for all tables"
    ${BINPATH}psql -p ${REPL_PORT} -d ${PGDATABASE} -c "create subscription sub1 connection 'port=${PORT} dbname=${PGDATABASE}' publication pub1"

    echo "wating for snapshot to be pulled. sleep 20..."
    sleep 20
    OK=$(${BINPATH}psql -XAtq -p ${REPL_PORT} -d ${PGDATABASE} -c "select c = cr from (select count(*) c, count(*) filter (where srsubstate='r') cr from pg_subscription_rel) x;")
    if [ "$OK" != "t" ]; then
      echo "failed to set up pub-sub"
      exit 1
    fi

    echo "replica in folder ${DATADIR}_repl with port $REPL_PORT created"
    ${BINPATH}pg_ctl -D ${DATADIR} -w stop &>/dev/null
    ${BINPATH}pg_ctl -D ${DATADIR}_repl -w stop &>/dev/null
fi



if [ -n "$START" ]; then
	echo "starting postgresql on port $PORT ..."
	${BINPATH}pg_ctl -D $DATADIR start &>/dev/null
	if [ $? -ne 0 ]; then
		echo "pg_ctl start failed"
		exit 1
	fi	
    echo "Postgres cluster in folder '${DATADIR}', port ${PORT} started"

    if [ -n "$REPLICA" ]; then
        echo "starting replica on port $REPL_PORT ..."
        ${BINPATH}pg_ctl -D ${DATADIR}_repl start &>/dev/null
        if [ $? -ne 0 ]; then
            echo "pg_ctl start failed"
            exit 1
        fi
        echo "Postgres replica in folder '${DATADIR}_repl', port ${REPL_PORT} started"
    fi
fi

echo ""
echo "Postgres cluster setup in folder '${DATADIR}' finished"
echo ""
echo "Execute below to create aliases pgtc_stop/start/destroy_X"
echo "\". pgtc_aliases $DATADIR\""

if [ -n "$BINPATH" ] ; then
  echo ""
  echo "or"
  echo ""
  echo "${BINPATH}pg_ctl -D ${DATADIR} start"
  if [ -n "$REPLICA" ] ; then
    echo "${BINPATH}pg_ctl -D ${DATADIR}_repl start"
  fi
fi
